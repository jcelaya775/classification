abline(lm.fit, col = "read")
abline(lm.fit, col = "red")
abline(lm.fit, col="red")
?legend
legend(lm.fit, legend = "test", col="red")
legend(x, lm.fit, legend = "test", col="red")
legend(lm.fit, legend = "test", col="red")
legend(x, y, lm.fit, legend = "test", col="red")
legend(x, y, legend = "test", col="red")
nrow(x)
length(x)
length(y)
library(ISLR)
names(Smarket)
dim(Smarket)
summary(Smarket)
pairs(Smarket)
cor(Smarket)
Smarket.2005=Smarket[!train,]
dim(Smarket.2005)
Direction.2005=Direction[!train]
glm.probs=predict(glm.fits,Smarket.2005,type="response")
glm.pred=rep("Down",252)
glm.pred[glm.probs>.5]="Up"
table(glm.pred,Direction.2005)
mean(glm.pred==Direction.2005)
mean(glm.pred!=Direction.2005)
glm.fits=glm(Direction~Lag1+Lag2,data=Smarket,family=binomial,subset=train)
glm.probs=predict(glm.fits,Smarket.2005,type="response")
glm.pred=rep("Down",252)
glm.pred[glm.probs>.5]="Up"
table(glm.pred,Direction.2005)
mean(glm.pred==Direction.2005)
106/(106+76)
predict(glm.fits,newdata=data.frame(Lag1=c(1.2,1.5),Lag2=c(1.1,-0.8)),type="response")
library(MASS)
lda.fit=lda(Direction~Lag1+Lag2,data=Smarket,subset=train)
lda.fit
plot(lda.fit)
library(ISLR)
names(Smarket)
dim(Smarket)
summary(Smarket)
paris(Smarket)
pairs(Smarket)
?Smarket
cor(Smarket)
cor(Smarket[,-9])
attach(Smarket)
plot(Volume)
setwd("c:/repos/r/project-2")
?read.csv
Auto = read.csv("Auto.csv", na.string = "NA")
na.omit(Auto)
attach(Auto)
fix(Auto)
?na.omit
na.omit(Auto)
fix(Auto)
Auto = read.csv("Auto.csv", na.string = "na")
na.omit(Auto)
fix(Auto)
Auto = read.csv("Auto.csv")
na.omit(Auto)
attach(Auto)
fix(Auto)
# b): Exploring the data graphically
# First, ensure numeric predictors
Auto$horsepower = as.numeric(horsepower)
class(horsepower)
Auto = read.csv("Auto.csv", na.strings = c(NA, "NA"))
na.omit(Auto)
attach(Auto)
fix(Auto)
Auto = read.csv("Auto.csv", na.strings = c(NA, "NA", "?"))
na.omit(Auto)
attach(Auto)
fix(Auto)
na.omit(Auto)
attach(Auto)
fix(Auto)
fix(Auto[horsepower = "NA"])
fix(Auto[horsepower = NA])
?fix
Auto[horsepower = NA]
Auto[horsepower = "NA"]
summarY(Auto)
summary(Auto)
na.omit(Auto)
summary(Auto)
Auto = read.csv("Auto.csv", na.strings = c(NA, "NA", "?"))
summary(Auto)
na.omit(Auto)
summary(Auto)
Auto = read.csv("Auto.csv"))
na.omit(Auto)
Auto = read.csv("Auto.csv")
summary(Auto)
# b): Exploring the data graphically
# First, ensure numeric predictors
Auto$horsepower = as.numeric(horsepower)
summary(Auto)
read.auto.data = function() {
Auto = read.csv("Auto.csv")
Auto = na.omit(Auto) # ignore NA values
Auto$horsepower = as.numeric(Auto$horsepower) # convert horsepower to numeric
return(Auto)
}
# Extract numeric data only
Auto = read.auto.data()
Auto = subset(Auto, select = -c(name, origin))
# Correlations for each pair of variables
for (col1 in colnames(Auto)) {
for (col2 in colnames(Auto)) {
print(cor(Auto[col1], Auto[col2]))
}
}
pairs(Auto)
summary(Auto)
Auto = subset(Auto, select = -c(name))
# Correlations for each pair of variables
for (col1 in colnames(Auto)) {
for (col2 in colnames(Auto)) {
print(cor(Auto[col1], Auto[col2]))
}
}
# Extract numeric data only
Auto = read.auto.data()
Auto = subset(Auto, select = -c(name))
# Correlations for each pair of variables
for (col1 in colnames(Auto)) {
for (col2 in colnames(Auto)) {
print(cor(Auto[col1], Auto[col2]))
}
}
pairs(Auto)
for (i in 1:length(Auto)) {
print(names(Auto)[i])
print(class(Auto[,i]))
}
# Correlations for each pair of variables
for (col1 in colnames(Auto)) {
for (col2 in colnames(Auto)) {
print(cor(Auto[col1], Auto[col2]))
}
}
pairs(Auto)
?pairs
# Read data
Auto = read.auto.data
attach(Auto)
fix(Auto)
summary(Auto)
setwd("c:/repos/r/project-2")
read.auto.data = function() {
Auto = read.csv("Auto.csv")
Auto = na.omit(Auto) # ignore NA values
Auto$horsepower = as.numeric(Auto$horsepower) # convert horsepower to numeric
return(Auto)
}
# Read data
Auto = read.auto.data
attach(Auto)
fix(Auto)
# Read data
Auto = read.auto.data()
attach(Auto)
fix(Auto)
summary(Auto)
# a): Add binary variables mpg01 to data set
mpg01 = rep(0, length(mpg)) # mpg01 = 0 if mpg < median(mpg)
mpg01[mpg > median(mpg)] = 1 # else mpg01 = 1 if mpg > median(mpg)
Auto$mpg01 = mpg01
summary(mpg01)
mgp01
Auto$mpg01
# b): Exploring the data graphically
# First, ensure numeric predictors
Auto = subset(Auto, select = -c(name)) # extract only numeric data
# Correlations for each pair of variables
for (col1 in colnames(Auto)) {
for (col2 in colnames(Auto)) {
print(cor(Auto[col1], Auto[col2]))
}
}
?pairs
pairs(Auto)
# Correlations for each pair of variables
library(ggplot2)
ggpairs(Auto)
# Correlations for each pair of variables
library(ggplot2)
# Correlations for each pair of variables
library(ggplot2)
ggpairs(Auto)
ggpairs(Auto)
library(GGally)
library(GGally)
install.packages(GGally)
library(GGally)
install.packages("GGaly")
install.packages("GGally")
library(GGally)
install.packages("GGally")
install.packages("GGally")
install.packages("GGally")
library(GGally)
pairs(Auto)
ggpairs(Auto)
pairs(Auto)
ggpairs(Auto)
plot(Auto$mpg01, Auto$col)
for (col in colnames(Auto)) {
plot(Auto$mpg01, Auto$col)
}
for (col in colnames(Auto)) {
plot(Auto$mpg01, Auto[col])
}
for (col in colnames(Auto)) {
plot(Auto$mpg01, Auto[,col])
}
plot(Auto$mpg01, Auto[,col], xlab = col, ylab = "MPG > Median")
for (col in colnames(Auto)) {
plot(Auto$mpg01, Auto[,col], xlab = col, ylab = "MPG > Median")
}
par(mfrow = c(10, 10))
for (col in colnames(Auto)) {
plot(Auto$mpg01, Auto[,col], xlab = col, ylab = "MPG > Median")
}
par(mfrow = c(2, 5))
for (col in colnames(Auto[,1:5])) {
plot(Auto$mpg01, Auto[,col], xlab = col, ylab = "MPG > Median")
}
for (col in colnames(Auto)) {
plot(Auto$mpg01, Auto[,col], xlab = col, ylab = "MPG > Median")
}
par(mfrow = c(3, 5))
for (col in colnames(Auto)) {
plot(Auto$mpg01, Auto[,col], xlab = col, ylab = "MPG > Median")
}
?par
par(mfrow = c(5, 5))
for (col in colnames(Auto)) {
plot(Auto$mpg01, Auto[,col], xlab = col, ylab = "MPG > Median")
}
dev.off()
?par
par(mfrow = c(5, 5))
for (col in colnames(Auto)) {
plot(Auto$mpg01, Auto[,col], xlab = col, ylab = "MPG > Median")
}
par(mfrow = c(2, 1))
for (col in colnames(Auto)) {
plot(Auto$mpg01, Auto[,col], xlab = col, ylab = "MPG > Median")
}
par(mfrow = c(1, 10))
for (col in colnames(Auto)) {
plot(Auto$mpg01, Auto[,col], xlab = col, ylab = "MPG > Median")
}
par(mfrow = c(0, 10))
for (col in colnames(Auto)) {
plot(Auto$mpg01, Auto[,col], xlab = col, ylab = "MPG > Median")
}
par(mfrow = c(1, length(Auto[,])))
for (col in colnames(Auto)) {
plot(Auto$mpg01, Auto[,col], xlab = col, ylab = "MPG > Median")
}
# Read data
Auto = read.auto.data()
attach(Auto)
fix(Auto)
summary(Auto)
# a): Add binary variables mpg01 to data set
mpg01 = rep(0, length(mpg)) # mpg01 = 0 if mpg < median(mpg)
mpg01[mpg > median(mpg)] = 1 # else mpg01 = 1 if mpg > median(mpg)
Auto$mpg01 = mpg01
Auto$mpg01
# b): Exploring the data graphically
# First, ensure numeric predictors
Auto = subset(Auto, select = -c(name)) # extract only numeric data
# Correlations for each pair of variables
library(ggplot2)
install.packages("GGally")
library(GGally)
for (col1 in colnames(Auto)) {
for (col2 in colnames(Auto)) {
print(cor(Auto[col1], Auto[col2]))
}
}
pairs(Auto)
ggpairs(Auto)
?par
par(mfrow = c(1, length(Auto[,])))
for (col in colnames(Auto)) {
plot(Auto$mpg01, Auto[,col], xlab = col, ylab = "MPG > Median")
}
par(mfrow = c(2, length(Auto[,])))
for (col in colnames(Auto)) {
plot(Auto$mpg01, Auto[,col], xlab = col, ylab = "MPG > Median")
}
par(mfrow = c(3, 5))
for (col in colnames(Auto)) {
plot(Auto$mpg01, Auto[,col], xlab = col, ylab = "MPG > Median")
}
par(mfrow = c(3, 3))
for (col in colnames(Auto)) {
plot(Auto$mpg01, Auto[,col], xlab = col, ylab = "MPG > Median")
}
for (col in colnames(Auto)) {
boxplot(Auto$mpg01, Auto[,col], xlab = col, ylab = "MPG > Median")
}
pairs(Auto)
for (col in colnames(Auto)) {
boxplot(Auto$mpg01, Auto[,col], xlab = col, ylab = "MPG > Median")
}
length(Auto[mpg01 = 1])
length(Auto[mpg01 = 1])
Auto$mpg01 = mpg01
length(Auto[mpg01 = 1])
length(Auto[mpg01 = 0])
length(Auto[,mpg01 = 0])
length(Auto[mpg01= 1])
mpg01
class(mpg01)
summary(Auto)
count(mpg01)
Auto[mpg01 = 1]
Auto$mpg01 = mpg01
Auto$mpg01
Auto[mpg01 = 1]
View(Auto)
# Read data
Auto = data.frame(read.auto.data())
attach(Auto)
# Read data
Auto = data.frame(read.auto.data())
?na.strings
?read.csv
Auto = read.csv("Auto.csv", na.strings = c("", " "))
read.auto.data = function() {
Auto = read.csv("Auto.csv", na.strings = c("", " "))
Auto = na.omit(Auto) # ignore NA values
Auto$horsepower = as.numeric(Auto$horsepower) # convert horsepower to numeric
return(Auto)
}
# Read data
Auto = data.frame(read.auto.data())
attach(Auto)
# Read data
Auto = data.frame(read.auto.data())
# Read data
Auto = data.frame(read.auto.data())
Auto = read.csv("Auto.csv", na.strings = c("", " ", NA, "NA"))
read.auto.data = function() {
Auto = read.csv("Auto.csv", na.strings = c("", " ", NA, "NA"))
Auto = na.omit(Auto) # ignore NA values
Auto$horsepower = as.numeric(Auto$horsepower) # convert horsepower to numeric
return(Auto)
}
# Read data
Auto = data.frame(read.auto.data())
?read.csv
read.auto.data = function() {
Auto = read.csv("Auto.csv", na.strings = c("", " ", NA, "NA", "na", "Na"))
Auto = na.omit(Auto) # ignore NA values
Auto$horsepower = as.numeric(Auto$horsepower) # convert horsepower to numeric
return(Auto)
}
# Read data
Auto = data.frame(read.auto.data())
library(tidyr))
library(tidyr)
drop_na(Auto)
Auto = data.frame(Auto)
# Read data
library(tidyr)
Auto = data.frame(read.auto.data())
read.auto.data = function() {
Auto = read.csv("Auto.csv")
drop_na(Auto)
Auto$horsepower = as.numeric(Auto$horsepower) # convert horsepower to numeric
return(Auto)
}
# Read data
library(tidyr)
Auto = data.frame(read.auto.data())
# Read data
library(tidyr)
library(tidyr)
read.auto.data = function() {
Auto = read.csv("Auto.csv")
drop_na(Auto)
Auto$horsepower = as.numeric(Auto$horsepower) # convert horsepower to numeric
return(Auto)
}
# Read data
Auto = data.frame(read.auto.data())
read.auto.data = function() {
Auto = read.csv("Auto.csv")
library(tidyr)
drop_na(Auto)
Auto$horsepower = as.numeric(Auto$horsepower) # convert horsepower to numeric
return(Auto)
}
# Read data
Auto = data.frame(read.auto.data())
# Read data
Auto = data.frame(read.auto.data())
# Read data
Auto = read.auto.data()
read.auto.data = function() {
Auto = read.csv("Auto.csv")
Auto$horsepower = as.numeric(Auto$horsepower) # convert horsepower to numeric
return(Auto)
}
# Read data
Auto = read.auto.data()
# Read data
Auto = read.auto.data()
# Read data
Auto = read.auto.data()
na.omit(Auto)
read.auto.data = function() {
Auto = read.csv("Auto.csv")
na.omit(Auto)
Auto$horsepower = as.numeric(Auto$horsepower) # convert horsepower to numeric
return(Auto)
}
# Read data
Auto = read.auto.data()
Auto = data.frame(Auto)
attach(Auto)
Auto = data.frame(Auto)
# a): Add binary variables mpg01 to data set
mpg01 = rep(0, length(mpg)) # mpg01 = 0 if mpg < median(mpg)
mpg01[mpg > median(mpg)] = 1 # else mpg01 = 1 if mpg > median(mpg)
Auto$mpg01 = mpg01
Auto[mpg01 = 1]
# b): Exploring the data graphically
Auto = subset(Auto, select = -c(name)) # extract only numeric data
pairs(Auto)
Auto[mpg01 = 1]
Auto$mpg01
table(Auto['mpg01'])
table(Auto$mpg01)
Auto[mpg > 23]
Auto[Auto$mpg > 23]
Auto[mpg > 23,]
Auto[mpg01 = 1,]
Auto[mpg01 > 23,]
Auto[mpg01 > 23,]
Auto[mpg > 23,]
Auto[mpg < 23,]
# Box plots for each pair of variables
par(mfrow = c(3, 3))
for (col in colnames(Auto)) {
boxplot(Auto$mpg01, Auto[,col], xlab = col, ylab = "MPG > Median")
}
for (col in colnames(Auto[,-c(1, 9)])) {
boxplot(Auto$mpg01, Auto[,col], xlab = col, ylab = "MPG > Median")
}
pairs(Auto)
# c): Split data into a training and test set
legnth(Auto)
# c): Split data into a training and test set
length(Auto)
# c): Split data into a training and test set
length(Auto[,])
# c): Split data into a training and test set
397 / 2
# c): Split data into a training and test set
int(397 / 2)
# c): Split data into a training and test set
dim(Auto)
# c): Split data into a training and test set
train = [as.integer(397 / 2)]
# c): Split data into a training and test set
train = as.integer(397 / 2)
Auto.train = Auto[train]
# c): Split data into a training and test set
train = 1:as.integer(397 / 2)
Auto.train = Auto[train]
# c): Split data into a training and test set
train = 1:as.integer(397 / 2)
Auto.train = Auto[train]
# c): Split data into a training and test set
train = 1:as.integer(397 / 2)
Auto.train = Auto[train,]
Auto.test = Auto[!train,]
# c): Split data into a training and test set
?sample
test = sample(Auto, 198)
test = sample(397), 198)
test = sample(397, 198)
Auto.train = Auto[train,]
Auto.test = Auto[!train,]
Auto.train = Auto[train]
Auto.test = Auto[!train]
test = sample(397, 198)
train = sample(397, 198)
Auto.train = Auto[train]
Auto.test = Auto[!train]
train = sample(397, 198)
Auto.train = Auto[train,]
Auto.test = Auto[!train,]
train
train = sample(c(TRUE, FALSE), nrow(df), replace=TRUE)
train
train = sample(c(TRUE, FALSE), nrow(Auto), replace=TRUE)
train
Auto.train = Auto[train,]
Auto.test = Auto[!train,]
